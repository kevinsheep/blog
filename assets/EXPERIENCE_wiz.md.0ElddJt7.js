import{_ as s,c as a,o as i,al as n}from"./chunks/framework.BG6RkuBV.js";const b=JSON.parse('{"title":"为知笔记私人部署","description":"","frontmatter":{"title":"为知笔记私人部署","updateTime":"2023/02/05","tags":"Docker|笔记"},"headers":[],"relativePath":"EXPERIENCE/wiz.md","filePath":"EXPERIENCE/wiz.md","lastUpdated":1742552080000}'),e={name:"EXPERIENCE/wiz.md"},p=n(`<h2 id="intro" tabindex="-1">Intro <a class="header-anchor" href="#intro" aria-label="Permalink to &quot;Intro&quot;">​</a></h2><p>使用过不少笔记工具，印象、有道、为知、语雀、石墨、飞书、幕布...好几个还是长时间付费使用。这些工具都各有千秋，本文不是笔记工具评测文章，就不详细展开了。</p><p>我自己使用时间最长的是<a href="https://www.wiz.cn/" target="_blank" rel="noreferrer">为知笔记</a>了，尤其最近两年重构后的版本更为简洁好用。</p><p>不过有天发现，那几十块的费用可以有不同的用法：买个最便宜的服务器，然后私有化部署一个自己的笔记服务。服务器赶上搞活动时买，并不会比笔记服务年费贵，甚至比年费还便宜！而有个自己的服务器还有许多其他用途，远不止部署一个笔记服务……</p><p>有了这个想法后便不可收拾了，马上动手！</p><p>为知笔记私有化部署，是支持个人用户白嫖的，5 用户以下免费使用。官方做好 docker 镜像，并写了详细的<a href="https://www.wiz.cn/zh-cn/docker.html" target="_blank" rel="noreferrer">使用文档</a>。</p><p>业界良心，点赞！</p><h2 id="部署和升级" tabindex="-1">部署和升级 <a class="header-anchor" href="#部署和升级" aria-label="Permalink to &quot;部署和升级&quot;">​</a></h2><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入用户目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 建立数据存放目录，你也可以存放到自己喜欢的地方，后面的部署指令要相应修改</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wizdata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用 \`docker run\` 是一样的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 同一台服务器上首次部署的话，会自动拉取最新版本的镜像</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 你也可以不使用 80 端口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wiz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --restart=always</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/wizdata:/wiz/storage</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/localtime:/etc/localtime</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 80:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9269:9269/udp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wiznote/wizserver</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>以上执行成功后，就能通过服务器IP访问到自己的笔记服务前后台了。</p><p>如果重启过服务器，可以执行 <code>podman start wiz</code> 手动启动笔记服务。</p><p>如果官方发布了新镜像，想更新自己的服务的话，也很方便：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wiz</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wiz</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wiznote/wizserver:latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后重新在服务器上执行上面用过的部署的命令即可。</p><p>如果自己有比较好记简短的域名，绑定一个到服式器 IP，简直方便！而且如果我们一般用特价服务器，一年左右就换服务器了，到时可以仍用相同域名。</p><p>从网页端访问很方便，但显示效果和功能细节不如使用官方的专用客户端。可以到<a href="https://www.wiz.cn/zh-cn/wiznew.html" target="_blank" rel="noreferrer">这里</a>下载，支持 Ipad、Iphone、安卓、Windows、Linux 多个平台，我可以在多个平台间随时同步笔记。只需要在登录时，先指定使用私有部署服务。这时如果有绑定域名的话，就免于记忆一串IP地址了。</p><p>在 Linux 上建议使用 <a href="https://github.com/TheAssassin/AppImageLauncher" target="_blank" rel="noreferrer">AppImageLauncher</a> 来打开客户端。亲测 Ubuntu 和 Manjaro 上运行流畅、界面美观、操作便捷。</p><h2 id="备份和还原" tabindex="-1">备份和还原 <a class="header-anchor" href="#备份和还原" aria-label="Permalink to &quot;备份和还原&quot;">​</a></h2><p>不过官方文档里没有详细说到备份、恢复数据的事，需要用户自己按实现情况来发挥。</p><p>但这其实十分重要。当你成功地部署好服务，可以方便地使用自己的私有部署笔记后，就要马上验证备份和还原操作，确保你可以随时进行维护。没有问题后，下一步才是把自己的笔记，迁移到这个私有平台上。</p><p>毕竟数据无价，要不然，用上大半年后，才发现备份搞不定，或者备份的数据无法在别处原样还原，那就是一个悲剧了。</p><p>先登录到服务器终端，然后把数据文件夹打个包，要不然全是零散的文件。压缩后，存储体积和传输会时间大减。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wiz</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 停止容器运行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zcvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wizdata.tar.gz</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./wizdata</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>然后在本地电脑上把数据拉下来，现在好多终端有可视化交互，那个就不细说了，如果本地也是 Linux 系统，可以使用 <code>scp</code> 命令：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ***替换为你的服务器地址</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">***</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:/root/wizdata.tar.gz</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>建议定期备份一下。备份策略自己定就可以了。</p><p>什么？自动备份？有这个意识的话，都不用我来啰嗦了，自己研究吧！</p><p>如果要在新的服务器上重新还原数据进行部署，只需要反过来操作，即把备份数据传到服务器上，解压到 <code>wizdata</code> 文件夹：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ...替换为你的服务器地址</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./wizdata.tar.gz</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root@...:/root/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 解压</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zxvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wizdata.tar.gz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>最后，重新启动容器即可！</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wiz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,31),l=[p];function t(h,r,k,d,c,o){return i(),a("div",null,l)}const g=s(e,[["render",t]]);export{b as __pageData,g as default};
